// <auto-generated />
using System;
using System.Collections.Generic;
using IdentityServer.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IdentityServer.Models.Context.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250928110740_SeedUser")]
    partial class SeedUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("identitydb")
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IdentityServer.Models.DomainClasses.ApiResource", b =>
                {
                    b.Property<Guid>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Secret")
                        .HasColumnType("uuid");

                    b.HasKey("Index");

                    b.ToTable("ApiResource", "identitydb");
                });

            modelBuilder.Entity("IdentityServer.Models.DomainClasses.ApiScope", b =>
                {
                    b.Property<Guid>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Index");

                    b.ToTable("ApiScope", "identitydb");
                });

            modelBuilder.Entity("IdentityServer.Models.DomainClasses.ApiScopeResource", b =>
                {
                    b.Property<Guid>("ApiScopeIndex")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiResourceIndex")
                        .HasColumnType("uuid");

                    b.HasKey("ApiScopeIndex", "ApiResourceIndex");

                    b.HasIndex("ApiResourceIndex");

                    b.ToTable("ApiScopeResource", "identitydb");
                });

            modelBuilder.Entity("IdentityServer.Models.DomainClasses.Client", b =>
                {
                    b.Property<Guid>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("ClientGrantTypes")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<List<string>>("ClientSecrets")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Index");

                    b.ToTable("Client", "identitydb");
                });

            modelBuilder.Entity("IdentityServer.Models.DomainClasses.ClientApiScope", b =>
                {
                    b.Property<Guid>("ClientIndex")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiScopeIndex")
                        .HasColumnType("uuid");

                    b.HasKey("ClientIndex", "ApiScopeIndex");

                    b.HasIndex("ApiScopeIndex");

                    b.ToTable("ClientApiScope", "identitydb");
                });

            modelBuilder.Entity("IdentityServer.Models.DomainClasses.User", b =>
                {
                    b.Property<string>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Index");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "identitydb");

                    b.HasData(
                        new
                        {
                            Index = "cb3dc6a4-4564-4312-82d0-326ff5ba6c39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94a63d1f-7a86-4fce-a9cf-16179f93fdd3",
                            EmailConfirmed = true,
                            Id = "eb1b4c78-9eed-4a43-90e4-867e8770769b",
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            PasswordHash = "marist0103_pw",
                            PhoneNumberConfirmed = true,
                            Provider = 0,
                            SecurityStamp = "edf6ba1e-986b-4e3d-b7f3-78d20b77d70b",
                            TwoFactorEnabled = false,
                            UserName = "marist"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "identitydb");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "identitydb");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "identitydb");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "identitydb");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "identitydb");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "identitydb");
                });

            modelBuilder.Entity("IdentityServer.Models.DomainClasses.ApiScopeResource", b =>
                {
                    b.HasOne("IdentityServer.Models.DomainClasses.ApiResource", "ApiResource")
                        .WithMany("ApiScopeResources")
                        .HasForeignKey("ApiResourceIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServer.Models.DomainClasses.ApiScope", "ApiScope")
                        .WithMany("ApiScopeResources")
                        .HasForeignKey("ApiScopeIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");

                    b.Navigation("ApiScope");
                });

            modelBuilder.Entity("IdentityServer.Models.DomainClasses.ClientApiScope", b =>
                {
                    b.HasOne("IdentityServer.Models.DomainClasses.ApiScope", "ApiScope")
                        .WithMany("ClientApiScopes")
                        .HasForeignKey("ApiScopeIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServer.Models.DomainClasses.Client", "Client")
                        .WithMany("ClientApiScopes")
                        .HasForeignKey("ClientIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiScope");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IdentityServer.Models.DomainClasses.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IdentityServer.Models.DomainClasses.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServer.Models.DomainClasses.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IdentityServer.Models.DomainClasses.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServer.Models.DomainClasses.ApiResource", b =>
                {
                    b.Navigation("ApiScopeResources");
                });

            modelBuilder.Entity("IdentityServer.Models.DomainClasses.ApiScope", b =>
                {
                    b.Navigation("ApiScopeResources");

                    b.Navigation("ClientApiScopes");
                });

            modelBuilder.Entity("IdentityServer.Models.DomainClasses.Client", b =>
                {
                    b.Navigation("ClientApiScopes");
                });
#pragma warning restore 612, 618
        }
    }
}
